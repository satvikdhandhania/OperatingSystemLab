#include<pthread.h>
#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<semaphore.h>
#include<stdlib.h>
#include<fcntl.h>
#define BUFFER_SIZE 200

int buffer[BUFFER_SIZE];

sem_t mutex, empty, full;
void * produce( void * parameter ) {
        int in = 0  , nextProduced;
        while ( 1 ) {
                nextProduced =  rand() ;
                sem_wait( &empty );
                sem_wait( &mutex );
                buffer [ in ] = nextProduced ;
                printf("Produced Item %d , Its value  is :  %d\n" , in , nextProduced );
                usleep(1);
                in = ( in + 1 ) % BUFFER_SIZE ;
                sem_post( &mutex);
                sem_post( &full );
        }
}
void * consume( void * parameter ) {
        int  out = 0 ,  nextConsumed;
        while ( 1 ) {

                sem_wait( &full );
                sem_wait( &mutex );
                nextConsumed = buffer[out];
                printf( "Consumed  Item %d , its value  is : %d  \n" , out,nextConsumed );
                usleep ( 100 );
                out = ( out + 1 ) % BUFFER_SIZE ;

                sem_post( &mutex );
                sem_post( &empty );
        }
}


int main()  {
        pthread_t pid, cid;

        sem_init( &mutex,0, 1 );
        sem_init( &empty,0, BUFFER_SIZE );
        sem_init( &full,0, 0 );

        pthread_create(&pid, NULL, produce, NULL);
        pthread_create(&cid, NULL, consume, NULL);

        pthread_join(pid, NULL);
        pthread_join(cid, NULL);


        return 0;
}


output:
gcc  process.c 
./a.out